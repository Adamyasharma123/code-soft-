# TASK 2: Movie Rating Prediction with Python

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load dataset
data = pd.read_csv("IMDb Movies India.csv")  # change file name if needed

print("First 5 rows of dataset:")
print(data.head())

# Keep useful columns (can vary based on dataset structure)
useful_cols = ["IMDB_Rating", "Director", "Genre", "Actors", "Year"]
data = data[useful_cols]

# Drop rows with missing values
data.dropna(inplace=True)

# Encode categorical variables
le = LabelEncoder()
data["Director"] = le.fit_transform(data["Director"].astype(str))
data["Genre"] = le.fit_transform(data["Genre"].astype(str))
data["Actors"] = le.fit_transform(data["Actors"].astype(str))

# Features and target
X = data.drop("IMDB_Rating", axis=1)
y = data["IMDB_Rating"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("\nMean Absolute Error:", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("Root Mean Squared Error:", np.sqrt(mean_squared_error(y_test, y_pred)))
print("R2 Score:", r2_score(y_test, y_pred))

# Optional: Compare actual vs predicted ratings
results = pd.DataFrame({"Actual": y_test, "Predicted": y_pred})
print("\nSample Predictions:\n", results.head())
